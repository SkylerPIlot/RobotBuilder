\#include "Robot.h"

#@autogenerated_code("includes", "")
#parse("${exporter-path}CommandBasedRobot-includes.h")
#end
//Reminder for any commands you plan to use for an auto's
//Sendable chooser. Include them here. Example
//#include "Commands/AutoCommand.h"
std::unique_ptr<OI> Robot::oi;

Robot::Robot(): autonomousCommand(nullptr)
{

}

void Robot::RobotInit() {
	RobotMap::init();
#@autogenerated_code("constructors", "	")
#parse("${exporter-path}CommandBasedRobot-constructors.cpp")
#end
	//I couldn't figure out how to fix this generator.... just capitilize the first letter of the subsystem name
	// to fix the errors.

	// This MUST be here. If the OI creates Commands (which it very likely
	// will), constructing it during the construction of CommandBase (from
	// which commands extend), subsystems are not guaranteed to be
	// yet. Thus, their requires() statements may grab null pointers. Bad
	// news. Don't move it.
	OI::getInstance();

// to add modes to this chooses add them like this
// chooser.AddDefault("Do Nothing", new AutonomousCommand);
// chooser.AddObject("Center Gear", new AutoCenterGear);
	frc::SmartDashboard::PutData("Auto Modes", &chooser);
}
void Robot::RobotPeriodic(){

}
/**
 * This function is called when the disabled button is hit.
 * You can use it to reset subsystems before shutting down.
 */
void Robot::DisabledInit(){

}

void Robot::DisabledPeriodic() {
	frc::Scheduler::GetInstance()->Run();
}

void Robot::AutonomousInit() {
	autonomousCommand = chooser.GetSelected();
	if (autonomousCommand != nullptr)
		autonomousCommand->Start();
}

void Robot::AutonomousPeriodic() {
	frc::Scheduler::GetInstance()->Run();
}

void Robot::TeleopInit() {
	// This makes sure that the autonomous stops running when
	// teleop starts running. If you want the autonomous to
	// continue until interrupted by another command, remove
	// these lines or comment it out.
	if (autonomousCommand == nullptr)
		autonomousCommand->Cancel();
}

void Robot::TeleopPeriodic() {
	frc::Scheduler::GetInstance()->Run();
}

void Robot::TestPeriodic() {
	lw->Run();
}

START_ROBOT_CLASS(Robot);

