#set($subsystem = $helper.getByName($subsystem-name, $robot))
#macro( klass $cmd )#if( "#type($cmd)" == "" )Subsystem#else#type($cmd)#end#end
${helper.getImports($subsystem, "RobotMap")}
\#include "#class($subsystem.name).h"
\#include "../RobotMap.h"
#@autogenerated_code("includes", "")
#parse("${exporter-path}Subsystem-includes.cpp")
#end

const char #class($subsystem.name)::kSubsystemName[] = "#class($subsystem.name)";

std::shared_ptr<#class($subsystem.name)> #class($subsystem.name)::self;

std::shared_ptr<#class($subsystem.name)> #class($subsystem.name)::getInstance() {
	if (! self){
			self = std::shared_ptr<#class($subsystem.name)>(new #class($subsystem.name));
	}
	return self;
}

#class($subsystem.name)::#class($subsystem.name)() : #klass($subsystem)(kSubsystemName),
#@autogenerated_code("declarations", "    ")
#parse("${exporter-path}Subsystem-declarations.cpp")
#end
//Hey I couldn't fix this using the exporter so make sure to take the comma
//off of the last Talon or whatever is declared. Just a friendly warning from SkylerPIlot
{

}

void #class($subsystem.name)::InitDefaultCommand() {
    // Set the default command for a subsystem here.
    // SetDefaultCommand(new MySpecialCommand());
#@autogenerated_code("default_command", "    ")
#parse("${exporter-path}Subsystem-default_command.cpp")
#end
}

void #class($subsystem.name)::Periodic() {
    // Put code here to be run every loop

}


// Put methods for controlling this subsystem
// here. Call these from Commands.

