#set($subsystem = $helper.getByName($subsystem-name, $robot))
#macro( klass $cmd )#if( "#type($cmd)" == "" )frc::Subsystem#else#type($cmd)#end#end
#ifndef #constant($subsystem.name)_H
\#define #constant($subsystem.name)_H
\#include <Commands/Subsystem.h>
\#include <CANTalon.h>

	// Don't forget to include other file or classes needed to build
	// if used such as DoubleSolenoids or Relays
/**
 *
 *
 * @author SkylerPIlot
 */
class #class($subsystem.name): public #klass($subsystem) {
private:
	// It's desirable that everything possible is private except
	// for methods that implement subsystem capabilities
static const char kSubsystemName[];
static std::shared_ptr<#class($subsystem.name)> self;
#class($subsystem.name)();

#@autogenerated_code("declarations", "	")
#parse("${exporter-path}Subsystem-declarations.h")
#end

public:
	static std::shared_ptr<#class($subsystem.name)> getInstance();

	void InitDefaultCommand() override;

	void Periodic() override;
};

#endif
